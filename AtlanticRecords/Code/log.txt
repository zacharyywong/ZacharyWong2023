/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
Traceback (most recent call last):
  File "/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py", line 82, in <module>
    element = WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.XPATH, xpath)))
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/selenium/webdriver/support/wait.py", line 89, in until
    raise TimeoutException(message, screen, stacktrace)
selenium.common.exceptions.TimeoutException: Message: 
Stacktrace:
0   chromedriver                        0x0000000100e64e69 chromedriver + 5160553
1   chromedriver                        0x0000000100def593 chromedriver + 4679059
2   chromedriver                        0x00000001009a32c8 chromedriver + 172744
3   chromedriver                        0x00000001009d8b62 chromedriver + 392034
4   chromedriver                        0x00000001009d8d21 chromedriver + 392481
5   chromedriver                        0x0000000100a0b304 chromedriver + 598788
6   chromedriver                        0x00000001009f63fd chromedriver + 513021
7   chromedriver                        0x0000000100a090ab chromedriver + 589995
8   chromedriver                        0x00000001009f6623 chromedriver + 513571
9   chromedriver                        0x00000001009cbdce chromedriver + 339406
10  chromedriver                        0x00000001009cd105 chromedriver + 344325
11  chromedriver                        0x0000000100e2023e chromedriver + 4878910
12  chromedriver                        0x0000000100e37d17 chromedriver + 4975895
13  chromedriver                        0x0000000100e3da3f chromedriver + 4999743
14  chromedriver                        0x0000000100e3861a chromedriver + 4978202
15  chromedriver                        0x0000000100e14bb1 chromedriver + 4832177
16  chromedriver                        0x0000000100e54fd8 chromedriver + 5095384
17  chromedriver                        0x0000000100e55161 chromedriver + 5095777
18  chromedriver                        0x0000000100e6c2a8 chromedriver + 5190312
19  libsystem_pthread.dylib             0x00007ff800919514 _pthread_start + 125
20  libsystem_pthread.dylib             0x00007ff80091502f thread_start + 15

Traceback (most recent call last):
  File "/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py", line 169, in <module>
    dfCity = pd.read_csv(cityurl, skiprows = 2)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/util/_decorators.py", line 311, in wrapper
    return func(*args, **kwargs)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py", line 586, in read_csv
    return _read(filepath_or_buffer, kwds)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py", line 482, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py", line 811, in __init__
    self._engine = self._make_engine(self.engine)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/readers.py", line 1040, in _make_engine
    return mapping[engine](self.f, **self.options)  # type: ignore[call-arg]
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/c_parser_wrapper.py", line 51, in __init__
    self._open_handles(src, kwds)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/parsers/base_parser.py", line 222, in _open_handles
    self.handles = get_handle(
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/common.py", line 609, in get_handle
    ioargs = _get_filepath_or_buffer(
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/common.py", line 312, in _get_filepath_or_buffer
    with urlopen(req_info) as req:
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/site-packages/pandas/io/common.py", line 212, in urlopen
    return urllib.request.urlopen(*args, **kwargs)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/urllib/request.py", line 214, in urlopen
    return opener.open(url, data, timeout)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/urllib/request.py", line 523, in open
    response = meth(req, response)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/urllib/request.py", line 632, in http_response
    response = self.parent.error(
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/urllib/request.py", line 561, in error
    return self._call_chain(*args)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/urllib/request.py", line 494, in _call_chain
    result = func(*args)
  File "/Users/zacharywong/opt/anaconda3/lib/python3.9/urllib/request.py", line 641, in http_error_default
    raise HTTPError(req.full_url, code, msg, hdrs, fp)
urllib.error.HTTPError: HTTP Error 503: first byte timeout
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:221: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  dfCityTop20['Number of Cities where Song Broke Top20'] = dfCityTop20.count(axis = 'columns')-1
/Users/zacharywong/github/zacharywong2023/AtlanticRecords/Code/AtlanticRecordsWholeCode.py:239: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  df['Broke USTop20 Charts'] = np.where(pd.isna(df['Rank in Top US Chart']), False, True)
